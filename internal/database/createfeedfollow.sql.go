// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: createfeedfollow.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH insert_feed_follow AS (
    INSERT INTO feed_follows (feed_id, user_id)
    VALUES (
        $1,
        $2
    )
    RETURNING id, created_at, updated_at, user_id, feed_id
)

SELECT 
    insert_feed_follow.id, insert_feed_follow.created_at, insert_feed_follow.updated_at, insert_feed_follow.user_id, insert_feed_follow.feed_id,
    feeds.name AS feed_name,
    users.name AS user_name
FROM insert_feed_follow
INNER JOIN feeds ON insert_feed_follow.feed_id = feeds.id
INNER JOIN users ON insert_feed_follow.user_id = users.id
`

type CreateFeedFollowParams struct {
	FeedID uuid.UUID
	UserID uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.FeedID, arg.UserID)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}
